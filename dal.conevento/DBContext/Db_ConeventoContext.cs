// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using dal.conevento;
using biz.conevento.Entities;

#nullable disable

namespace dal.conevento.DBContext
{
    public partial class Db_ConeventoContext : DbContext
    {
        public Db_ConeventoContext()
        {
        }

        public Db_ConeventoContext(DbContextOptions<Db_ConeventoContext> options)
            : base(options)
        {
        }

        public virtual DbSet<CatCategoriaProducto> CatCategoriaProductos { get; set; }
        public virtual DbSet<CatProductosServicio> CatProductosServicios { get; set; }
        public virtual DbSet<Evento> Eventos { get; set; }
        public virtual DbSet<User> Users { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS");

            modelBuilder.Entity<CatCategoriaProducto>(entity =>
            {
                entity.ToTable("Cat_categoria_productos");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Categoria)
                    .HasMaxLength(50)
                    .HasColumnName("categoria");
            });

            modelBuilder.Entity<CatProductosServicio>(entity =>
            {
                entity.ToTable("cat_productos_servicios");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("id");

                entity.Property(e => e.DescripcionCorta)
                    .HasMaxLength(300)
                    .HasColumnName("descripcion_corta");

                entity.Property(e => e.DescripcionLarga)
                    .HasMaxLength(300)
                    .HasColumnName("descripcion_larga");

                entity.Property(e => e.DiasBloqueoAntes).HasColumnName("dias_bloqueo_antes");

                entity.Property(e => e.DiasBloqueoDespues).HasColumnName("dias_bloqueo_despues");

                entity.Property(e => e.IdCategoriaProducto).HasColumnName("id_categoria_producto");

                entity.Property(e => e.PrecioPorUnidad)
                    .HasMaxLength(50)
                    .HasColumnName("precio_por_unidad");

                entity.Property(e => e.Producto)
                    .HasMaxLength(50)
                    .HasColumnName("producto");

                entity.Property(e => e.Unidad)
                    .HasMaxLength(50)
                    .HasColumnName("unidad");

                entity.HasOne(d => d.IdCategoriaProductoNavigation)
                    .WithMany(p => p.CatProductosServicios)
                    .HasForeignKey(d => d.IdCategoriaProducto)
                    .HasConstraintName("FK_cat_productos_servicios_Cat_categoria_productos");
            });

            modelBuilder.Entity<Evento>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Apellidos)
                    .HasMaxLength(150)
                    .HasColumnName("apellidos");

                entity.Property(e => e.Colonia)
                    .HasMaxLength(10)
                    .HasColumnName("colonia")
                    .IsFixedLength(true);

                entity.Property(e => e.Correo)
                    .HasMaxLength(50)
                    .HasColumnName("correo");

                entity.Property(e => e.Cp)
                    .HasMaxLength(50)
                    .HasColumnName("cp");

                entity.Property(e => e.DetallesEvento)
                    .HasMaxLength(500)
                    .HasColumnName("detalles_evento");

                entity.Property(e => e.Direccion)
                    .HasMaxLength(500)
                    .HasColumnName("direccion");

                entity.Property(e => e.Estado).HasColumnName("estado");

                entity.Property(e => e.FechaCreacion)
                    .HasColumnType("datetime")
                    .HasColumnName("fecha_creacion");

                entity.Property(e => e.FechaPago)
                    .HasColumnType("datetime")
                    .HasColumnName("fecha_pago");

                entity.Property(e => e.Fin)
                    .HasColumnType("datetime")
                    .HasColumnName("fin");

                entity.Property(e => e.FormaPago).HasColumnName("forma_pago");

                entity.Property(e => e.GenteEsperada).HasColumnName("gente_esperada");

                entity.Property(e => e.IdUsuario).HasColumnName("id_usuario");

                entity.Property(e => e.Inicio)
                    .HasColumnType("datetime")
                    .HasColumnName("inicio");

                entity.Property(e => e.Municipio).HasColumnName("municipio");

                entity.Property(e => e.NombreEvento)
                    .HasMaxLength(50)
                    .HasColumnName("nombre_evento");

                entity.Property(e => e.Nombres)
                    .HasMaxLength(150)
                    .HasColumnName("nombres");

                entity.Property(e => e.NumExt)
                    .HasMaxLength(50)
                    .HasColumnName("num_ext");

                entity.Property(e => e.NumInt)
                    .HasMaxLength(50)
                    .HasColumnName("num_int");

                entity.Property(e => e.ReferenciaPago)
                    .HasMaxLength(500)
                    .HasColumnName("referencia_pago");

                entity.Property(e => e.Telefono)
                    .HasMaxLength(50)
                    .HasColumnName("telefono");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.Eventos)
                    .HasForeignKey(d => d.IdUsuario)
                    .HasConstraintName("FK_Eventos_users");
            });

            modelBuilder.Entity<User>(entity =>
            {
                entity.ToTable("users");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Apellidos)
                    .HasMaxLength(100)
                    .HasColumnName("apellidos");

                entity.Property(e => e.Correo)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasColumnName("correo");

                entity.Property(e => e.Estado).HasColumnName("estado");

                entity.Property(e => e.Estatus).HasColumnName("estatus");

                entity.Property(e => e.FechaCreacion)
                    .HasColumnType("datetime")
                    .HasColumnName("fecha_creacion");

                entity.Property(e => e.FechaEdicion)
                    .HasColumnType("datetime")
                    .HasColumnName("fecha_edicion");

                entity.Property(e => e.Municipio).HasColumnName("municipio");

                entity.Property(e => e.Nombres)
                    .HasMaxLength(100)
                    .HasColumnName("nombres");

                entity.Property(e => e.Pass)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("pass");

                entity.Property(e => e.Telefono)
                    .HasMaxLength(200)
                    .HasColumnName("telefono");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}